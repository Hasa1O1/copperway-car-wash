// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?
  price       Decimal  @db.Decimal(10, 2)
  duration    Int      // Duration in minutes
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  bookings Booking[]

  @@map("services")
}

model Booking {
  id                      Int      @id @default(autoincrement())
  bookingNumber           String   @unique @map("booking_number") @db.VarChar(20)
  customerName            String   @map("customer_name") @db.VarChar(100)
  customerPhone           String   @map("customer_phone") @db.VarChar(20)
  customerEmail           String?  @map("customer_email") @db.VarChar(100)
  vehicleModel            String   @map("vehicle_model") @db.VarChar(100)
  vehicleNumberPlate      String   @map("vehicle_number_plate") @db.VarChar(20)
  serviceId               Int      @map("service_id")
  scheduledDate           DateTime @map("scheduled_date") @db.Date
  scheduledTime           DateTime @map("scheduled_time") @db.Time
  pickupRequired          Boolean  @default(false) @map("pickup_required")
  pickupAddress           String?  @map("pickup_address")
  pickupLatitude          Decimal? @map("pickup_latitude") @db.Decimal(10, 8)
  pickupLongitude         Decimal? @map("pickup_longitude") @db.Decimal(11, 8)
  dropoffAddress          String?  @map("dropoff_address")
  dropoffLatitude         Decimal? @map("dropoff_latitude") @db.Decimal(10, 8)
  dropoffLongitude        Decimal? @map("dropoff_longitude") @db.Decimal(11, 8)
  status                  BookingStatus @default(PENDING_PAYMENT)
  amount                  Decimal  @db.Decimal(10, 2)
  paymentConfirmed        Boolean  @default(false) @map("payment_confirmed")
  paymentMethod           String?  @map("payment_method") @db.VarChar(50)
  paymentScreenshot       String?  @map("payment_screenshot") @db.VarChar(255)
  paymentNotes            String?  @map("payment_notes")
  paymentVerifiedBy       Int?     @map("payment_verified_by")
  paymentVerifiedAt       DateTime? @map("payment_verified_at")
  slotNumber              Int?    @map("slot_number")
  estimatedCompletionTime DateTime? @map("estimated_completion_time")
  queuePosition           Int?    @map("queue_position")
  completedAt             DateTime? @map("completed_at")
  customerId              Int?     @map("customer_id")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  // Relations
  service     Service        @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  customer    Customer?      @relation(fields: [customerId], references: [id], onDelete: SetNull)
  verifiedBy  AdminUser?     @relation("PaymentVerifier", fields: [paymentVerifiedBy], references: [id], onDelete: SetNull)
  queueHistory QueueHistory[]

  @@index([bookingNumber], map: "idx_booking_number")
  @@index([status], map: "idx_status")
  @@index([scheduledDate], map: "idx_scheduled_date")
  @@index([customerPhone], map: "idx_customer_phone")
  @@index([customerId], map: "idx_customer_id")
  @@map("bookings")
}

model AdminUser {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(50)
  password  String   @db.VarChar(255) // Hashed password
  fullName  String   @map("full_name") @db.VarChar(100)
  email     String?  @db.VarChar(100)
  role      UserRole @default(STAFF)
  isActive  Boolean  @default(true) @map("is_active")
  lastLogin DateTime? @map("last_login")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  queueHistory QueueHistory[]
  verifiedPayments Booking[] @relation("PaymentVerifier")

  @@map("admin_users")
}

model QueueHistory {
  id           Int           @id @default(autoincrement())
  bookingId    Int           @map("booking_id")
  statusChange BookingStatus @map("status_change")
  changedBy    Int?          @map("changed_by")
  notes        String?
  createdAt    DateTime      @default(now()) @map("created_at")

  // Relations
  booking   Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  adminUser AdminUser? @relation(fields: [changedBy], references: [id], onDelete: SetNull)

  @@map("queue_history")
}

model BusinessHours {
  id        Int      @id @default(autoincrement())
  dayOfWeek Int      @map("day_of_week") // 0=Sunday, 1=Monday, etc.
  openTime  DateTime @map("open_time") @db.Time
  closeTime DateTime @map("close_time") @db.Time
  isOpen    Boolean  @default(true) @map("is_open")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("business_hours")
}

model LocationSettings {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  address   String
  latitude  Decimal? @db.Decimal(10, 8)
  longitude Decimal? @db.Decimal(11, 8)
  phone     String?  @db.VarChar(100)
  email     String?  @db.VarChar(100)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("location_settings")
}

model Customer {
  id               Int       @id @default(autoincrement())
  name             String    @db.VarChar(100)
  phone            String    @unique @db.VarChar(20)
  email            String?   @db.VarChar(100)
  vehicleModel     String?   @map("vehicle_model") @db.VarChar(100)
  vehiclePlate     String?   @map("vehicle_plate") @db.VarChar(20)
  totalBookings    Int       @default(0) @map("total_bookings")
  totalSpent       Decimal   @default(0) @db.Decimal(10, 2) @map("total_spent")
  lastVisit        DateTime? @map("last_visit")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  bookings Booking[]

  @@index([phone], map: "idx_customer_phone")
  @@map("customers")
}

enum BookingStatus {
  PENDING_PAYMENT
  PAYMENT_VERIFIED
  CONFIRMED
  IN_QUEUE
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum UserRole {
  ADMIN
  STAFF
  CUSTOMER_SERVICE
}
